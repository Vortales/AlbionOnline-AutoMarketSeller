import pyautogui
import pytesseract
from PIL import Image, ImageEnhance, ImageGrab
import time
import keyboard
import numpy as np
import cv2
import re
import threading
import tkinter as tk
from tkinter import scrolledtext, messagebox
import datetime
import json
import os
import logging
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ tesseract.exe, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ PATH
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CONFIG_FILE = "auto_config.json"
screen_width, screen_height = pyautogui.size()
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CONFIG = {
    "regions": {
        "sell_button": {"x": 83.3, "y": 56.5},  # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–∞—Ç—å"
        "order_button": {"x": 49.5, "y": 63.9},  # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"
        "price_input": {"x": 50.5, "y": 74.9},  # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
        "submit_button": {"x": 62.5, "y": 84.0},  # –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
        "price_value": {"x1": 69.5, "y1": 50.0, "x2": 73.7, "y2": 52.0},  # –û–±–ª–∞—Å—Ç—å "–¶–µ–Ω–∞"
        "average_price": {"x1": 89.8, "y1": 81.5, "x2": 93.2, "y2": 85.2}  # –û–±–ª–∞—Å—Ç—å "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞"
    },
    "logic": {
        "fallback_ratio": 0.90,
        "max_difference_percent": 30,
        "robust_attempts": 12,
        "min_majority_count": 4
    },
    "ocr": {
        "whitelist_digits": "0123456789.,MTKmtk",
        "whitelist_text": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,"
    },
    "sleep": {
        "between_clicks": {"min": 0.04, "max": 0.06},
        "after_recognition": {"min": 0.04, "max": 0.06},
        "before_input": {"min": 0.04, "max": 0.06},
        "before_input": {"min": 0.04, "max": 0.06},
        "after_input": {"min": 0.14, "max": 0.16},
        "between_cycles": {"min": 0.4, "max": 0.6},
        "robust_recognition": {"min": 0.02, "max": 0.03}
    }
}
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ GUI
log_queue = []
log_lock = threading.Lock()
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
calibration_active = False
calibration_step = 0
calibration_regions = []
drag_start_point = None  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∂–∞—Ç–æ–º Shift
current_drag_box = None  # –¢–µ–∫—É—â–∞—è –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
shift_pressed = False  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ Shift
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º
main_loop_running = False
main_loop_thread = None
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞ (–∞ –Ω–µ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
current_loop_stop_flag = threading.Event()
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
visualization_queue = []
visualization_lock = threading.Lock()
visualization_active = False
last_drag_time = 0
DRAG_UPDATE_INTERVAL = 0.05  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (50 –º—Å)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_config():
    global CONFIG
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r') as f:
                loaded_config = json.load(f)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥–∞
                if "regions" in loaded_config and "logic" in loaded_config and "ocr" in loaded_config and "sleep" in loaded_config:
                    CONFIG = loaded_config
                    log_message("CONFIG", "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
                    return True
                else:
                    # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∞ sleep, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    if "sleep" not in loaded_config:
                        loaded_config["sleep"] = CONFIG["sleep"]
                        CONFIG = loaded_config
                        save_config()
                        log_message("CONFIG", "üîÑ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª sleep –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                    return True
        except Exception as e:
            log_message("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    return False


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
def save_config():
    try:
        with open(CONFIG_FILE, 'w') as f:
            json.dump(CONFIG, f, indent=4)
        log_message("CONFIG", "üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return True
    except Exception as e:
        log_message("ERROR", f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {str(e)}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥
def log_message(level, message):
    with log_lock:
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        log_queue.append(f"[{timestamp}] {level.upper()}: {message}")


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
def get_absolute_coords(region_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏."""
    region = CONFIG["regions"][region_name]
    if "x2" in region:  # –≠—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        x1 = int(screen_width * region["x1"] / 100)
        y1 = int(screen_height * region["y1"] / 100)
        x2 = int(screen_width * region["x2"] / 100)
        y2 = int(screen_height * region["y2"] / 100)
        return (x1, y1, x2, y2)
    else:  # –≠—Ç–æ —Ç–æ—á–∫–∞ (–∫–ª–∏–∫)
        x = int(screen_width * region["x"] / 100)
        y = int(screen_height * region["y"] / 100)
        return (x, y)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
def get_random_sleep(action):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
    try:
        sleep_config = CONFIG["sleep"].get(action, {"min": 0.05, "max": 0.05})
        min_time = sleep_config["min"]
        max_time = sleep_config["max"]
        return random.uniform(min_time, max_time)
    except Exception as e:
        log_message("ERROR", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è {action}: {str(e)}")
        return 0.05  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def preprocess_image(image, scale_percent=200):
    image = image.convert('L')
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(2.0)
    image_np = np.array(image)
    _, image_np = cv2.threshold(image_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    width = int(image_np.shape[1] * scale_percent / 100)
    height = int(image_np.shape[0] * scale_percent / 100)
    image_np = cv2.resize(image_np, (width, height), interpolation=cv2.INTER_CUBIC)
    return Image.fromarray(image_np)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏
def capture_region(region_name):
    """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞."""
    x1, y1, x2, y2 = get_absolute_coords(region_name)
    return ImageGrab.grab(bbox=(x1, y1, x2, y2))


# –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–µ–ª —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)
def parse_number_with_suffix(text):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —á–∏—Å–ª–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ M/T, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã."""
    if not text:
        return None
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    text = re.sub(r'[–∞-—è–ê-–Ø]', '', text)  # –£–¥–∞–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
    text = text.replace(" ", "").upper().rstrip('.')
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
    match = re.search(r'([\d.,]+)\s*([MTK])?\b', text)  # –î–æ–±–∞–≤–ª–µ–Ω K
    if not match:
        return None
    number_str, suffix = match.groups()
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —á–∏—Å–ª–∞, –∫—Ä–æ–º–µ –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫
    number_str = re.sub(r'[^\d.,]', '', number_str)
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—è—Ç–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á –∏–ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–æ–π
        if ',' in number_str and '.' in number_str:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∑–∞–ø—è—Ç–∞—è, –∏ —Ç–æ—á–∫–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è - –¥–µ—Å—è—Ç–∏—á–Ω–∞—è
            if number_str.rfind(',') < number_str.rfind('.'):
                # –§–æ—Ä–º–∞—Ç: 1,234.56
                number_str = number_str.replace(',', '')
            else:
                # –§–æ—Ä–º–∞—Ç: 1.234,56
                number_str = number_str.replace('.', '').replace(',', '.')
        elif ',' in number_str:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–ø—è—Ç–∞—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á
            number_str = number_str.replace(',', '')
        elif '.' in number_str and number_str.count('.') > 1:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫, —É–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            last_dot = number_str.rfind('.')
            number_str = number_str[:last_dot].replace('.', '') + number_str[last_dot:]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        number = float(number_str)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã
        if suffix == 'M':
            number *= 1_000_000
        elif suffix in ['T', 'K']:  # –¢–µ–ø–µ—Ä—å K –∏ T —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ
            number *= 1_000
        return int(number)
    except (ValueError, TypeError) as e:
        log_message("DEBUG", f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–∞ '{text}': {str(e)}")
        return None


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–∏—Å–ª–∞
def recognize_number(region_name, use_robust=False, attempts=12):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏."""
    if use_robust:
        return robust_recognize_number(region_name, attempts)
    try:
        img = capture_region(region_name)
        processed = preprocess_image(img)
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º whitelist
        text = pytesseract.image_to_string(
            processed,
            config=f'--psm 7 --oem 1 -c tessedit_char_whitelist={CONFIG["ocr"]["whitelist_digits"]}'
        ).strip()
        log_message("DEBUG", f"Raw OCR result from {region_name}: '{text}'")
        return parse_number_with_suffix(text)
    except Exception as e:
        log_message("ERROR", f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ {region_name}: {str(e)}")
        return None


# –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
def robust_recognize_number(region_name, attempts=12):
    """
    –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ None.
    """
    results = []
    configs = [
        '--psm 6 --oem 1',
        '--psm 7 --oem 1',
        '--psm 8 --oem 1',
        '--psm 13 --oem 1'
    ]
    contrasts = [1.5, 2.0, 2.5]
    thresholds = [True, False]
    scales = [150, 200, 250]
    log_message("INFO", f"üîç –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ({attempts} –ø–æ–ø—ã—Ç–æ–∫)...")
    for i in range(attempts):
        try:
            img = capture_region(region_name)
            image = img.convert('L')
            contrast = contrasts[i % len(contrasts)]
            enhancer = ImageEnhance.Contrast(image)
            image = enhancer.enhance(contrast)
            image_np = np.array(image)
            use_otsu = thresholds[i % len(thresholds)]
            if use_otsu:
                _, image_np = cv2.threshold(image_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            else:
                _, image_np = cv2.threshold(image_np, 127, 255, cv2.THRESH_BINARY)
            scale = scales[i % len(scales)]
            width = int(image_np.shape[1] * scale / 100)
            height = int(image_np.shape[0] * scale / 100)
            image_np = cv2.resize(image_np, (width, height), interpolation=cv2.INTER_CUBIC)
            processed = Image.fromarray(image_np)
            config = configs[i % len(configs)]
            text = pytesseract.image_to_string(
                processed,
                config=f'{config} -c tessedit_char_whitelist={CONFIG["ocr"]["whitelist_digits"]}'
            ).strip().rstrip('.').upper()
            log_message("DEBUG", f"Robust OCR attempt {i + 1}: '{text}'")
            number = parse_number_with_suffix(text)
            results.append(number)
        except Exception as e:
            log_message("DEBUG", f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {i + 1}: {e}")
            results.append(None)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        time.sleep(get_random_sleep("robust_recognition"))

    # –ê–Ω–∞–ª–∏–∑: –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    valid_results = [r for r in results if r is not None]
    if not valid_results:
        log_message("ERROR", "‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.")
        return None
    from collections import Counter
    counter = Counter(valid_results)
    most_common, count = counter.most_common(1)[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    if count >= CONFIG["logic"]["min_majority_count"]:
        log_message("SUCCESS", f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {most_common:,} (–Ω–∞–π–¥–µ–Ω–æ {count} —Ä–∞–∑)")
        return most_common
    else:
        log_message("WARNING",
                    f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {most_common:,} ({count} —Ä–∞–∑), –Ω—É–∂–Ω–æ ‚â• {CONFIG['logic']['min_majority_count']}")
        return None


# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª (—Ä–∞–∑–Ω–∏—Ü–∞ ‚â§ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞)
def compare_numbers(number1, number2):
    if number1 is None or number2 is None:
        return False
    diff_percent = abs(number1 - number2) / max(number1, number2) * 100
    return diff_percent <= CONFIG["logic"]["max_difference_percent"]


# === –ö–ê–õ–ò–ë–†–û–í–ö–ê ===
def start_calibration():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏. –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Shift, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ü–ö–ú."""
    global calibration_active, calibration_step, calibration_regions
    calibration_regions = [
        "sell_button",  # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–∞—Ç—å"
        "order_button",  # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"
        "price_input",  # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
        "submit_button",  # –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
        "price_value",  # –û–±–ª–∞—Å—Ç—å "–¶–µ–Ω–∞" (—á–∏—Å–ª–æ)
        "average_price"  # –û–±–ª–∞—Å—Ç—å "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞" (—á–∏—Å–ª–æ)
    ]
    calibration_step = 0
    calibration_active = True
    log_message("CALIBRATE", "üîß –†–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω")
    log_message("CALIBRATE", "1. –ù–∞–∂–º–∏—Ç–µ –ü–ö–ú –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–µ: '–ü—Ä–æ–¥–∞—Ç—å'")
    log_message("HINT", "‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–∞–∂–º–∏—Ç–µ Esc –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")


def handle_calibration_click(x, y, button, pressed):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
    global calibration_active, calibration_step, calibration_regions, drag_start_point, current_drag_box
    if not (calibration_active and pressed):
        return True
    # Esc –æ—Ç–º–µ–Ω—è–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫—É (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ)
    current_region = calibration_regions[calibration_step]
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
    region_names_rus = {
        "sell_button": "–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–∞—Ç—å'",
        "order_button": "–ö–Ω–æ–ø–∫–∞ '–ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É'",
        "price_input": "–û–±–ª–∞—Å—Ç—å –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã",
        "submit_button": "–ö–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'",
        "price_value": "–û–±–ª–∞—Å—Ç—å '–¶–µ–Ω–∞'",
        "average_price": "–û–±–ª–∞—Å—Ç—å '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'"
    }
    # –î–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–ö–ú –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–æ—á–∫–∏
    if current_region in ["sell_button", "order_button", "price_input", "submit_button"]:
        if button == 'right':  # –ü–ö–ú ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ—á–∫—É
            rel_x = (x / screen_width) * 100
            rel_y = (y / screen_height) * 100
            CONFIG["regions"][current_region] = {"x": rel_x, "y": rel_y}
            log_message("CALIBRATE", f"üìç {region_names_rus[current_region]} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ({rel_x:.2f}%, {rel_y:.2f}%)")
            calibration_step += 1
            if calibration_step >= len(calibration_regions):
                save_config()
                calibration_active = False
                log_message("CALIBRATE", "‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            else:
                next_region = calibration_regions[calibration_step]
                if next_region in ["sell_button", "order_button", "price_input", "submit_button"]:
                    log_message("CALIBRATE", f"–ù–∞–∂–º–∏—Ç–µ –ü–ö–ú –Ω–∞: {region_names_rus[next_region]}")
                else:
                    log_message("CALIBRATE", f"–ó–∞–∂–º–∏—Ç–µ Shift –∏ –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è: {region_names_rus[next_region]}")
        return True
    # –î–ª—è –æ–±–ª–∞—Å—Ç–µ–π —á–∏—Å–µ–ª: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ü–ö–ú –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    if current_region in ["price_value", "average_price"]:
        if button == 'right' and drag_start_point is not None and current_drag_box is not None:
            # –ü–ö–ú ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å
            x1, y1 = drag_start_point
            x2, y2 = current_drag_box
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            x1, x2 = min(x1, x2), max(x1, x2)
            y1, y2 = min(y1, y2), max(y1, y2)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            rel_x1 = (x1 / screen_width) * 100
            rel_y1 = (y1 / screen_height) * 100
            rel_x2 = (x2 / screen_width) * 100
            rel_y2 = (y2 / screen_height) * 100
            CONFIG["regions"][current_region] = {
                "x1": rel_x1, "y1": rel_y1,
                "x2": rel_x2, "y2": rel_y2
            }
            log_message("CALIBRATE",
                        f"‚úÖ {region_names_rus[current_region]} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {rel_x1:.2f}%, {rel_y1:.2f}% - {rel_x2:.2f}%, {rel_y2:.2f}%")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–±–ª–∞—Å—Ç–∏
            calibration_step += 1
            if calibration_step >= len(calibration_regions):
                save_config()
                calibration_active = False
                log_message("CALIBRATE", "‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            else:
                next_region = calibration_regions[calibration_step]
                if next_region in ["sell_button", "order_button", "price_input", "submit_button"]:
                    log_message("CALIBRATE", f"–ù–∞–∂–º–∏—Ç–µ –ü–ö–ú –Ω–∞: {region_names_rus[next_region]}")
                else:
                    log_message("CALIBRATE", f"–ó–∞–∂–º–∏—Ç–µ Shift –∏ –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è: {region_names_rus[next_region]}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            drag_start_point = None
            current_drag_box = None
            return True
        elif button == 'left':
            # –õ–ö–ú ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            log_message("CALIBRATE",
                        f"–õ–ö–ú –Ω–∞–∂–∞—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è '{region_names_rus[current_region]}'")
            return True
    return True


def visualization_worker():
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π —Å –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –∫–∞–¥—Ä–æ–≤."""
    global visualization_active
    visualization_active = True
    target_fps = 60  # –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
    frame_delay = 1.0 / target_fps  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 16.67 –º—Å)
    while visualization_active:
        start_time = time.time()
        with visualization_lock:
            if visualization_queue:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É (—Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é)
                x1, y1, x2, y2 = visualization_queue[-1]
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
                    overlay = tk.Toplevel()
                    overlay.attributes("-topmost", True)
                    overlay.attributes("-transparentcolor", "black")
                    overlay.attributes("-alpha", 0.4)  # –ù–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—Å–∏–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                    overlay.overrideredirect(True)
                    overlay.geometry(f"{screen_width}x{screen_height}+0+0")
                    canvas = tk.Canvas(overlay, width=screen_width, height=screen_height,
                                       bg="black", highlightthickness=0)
                    canvas.pack()
                    # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ–π –∑–µ–ª–µ–Ω–æ–π —Ä–∞–º–∫–æ–π
                    canvas.create_rectangle(x1, y1, x2, y2, outline="lime", width=2)  # lime - —è—Ä—á–µ, —á–µ–º green
                    # –ü–ª–∞–≤–Ω–æ –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 170 –º—Å (–≤–º–µ—Å—Ç–æ —Ä–µ–∑–∫–æ–≥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è)
                    overlay.after(170, overlay.destroy)
                except Exception as e:
                    log_message("DEBUG", f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        elapsed = time.time() - start_time
        # –°–ø–∏–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã –∫–∞–¥—Ä–æ–≤
        if elapsed < frame_delay:
            time.sleep(frame_delay - elapsed)


def start_visualization_worker():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
    worker_thread = threading.Thread(target=visualization_worker, daemon=True)
    worker_thread.start()
    return worker_thread


def draw_calibration_box(x1, y1, x2, y2):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å."""
    with visualization_lock:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
        visualization_queue[:] = [box for box in visualization_queue
                                  if not (abs(box[0] - x1) < 10 and abs(box[1] - y1) < 10)]
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        visualization_queue.append((x1, y1, x2, y2))


def handle_shift_drag(x, y):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –ø—Ä–∏ –∑–∞–∂–∞—Ç–æ–º Shift –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è."""
    global calibration_active, calibration_step, drag_start_point, current_drag_box, shift_pressed
    shift_held = keyboard.is_pressed('shift')
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
    if not calibration_active:
        return
    current_region = calibration_regions[calibration_step] if calibration_step < len(calibration_regions) else None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ —á–∏—Å–ª–∞
    if not current_region or current_region not in ["price_value", "average_price"]:
        return
    # –ï—Å–ª–∏ Shift —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞—Ç (–Ω–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è)
    if shift_held and not shift_pressed:
        shift_pressed = True
        drag_start_point = (x, y)
        log_message("CALIBRATE", f"üìå –ù–æ–≤–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ({x}, {y})")
        return  # –ù–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º, –ø–æ–∫–∞ –º—ã—à—å –Ω–µ –¥–≤–∏–Ω–µ—Ç—Å—è
    # –ï—Å–ª–∏ Shift —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if shift_held and shift_pressed:
        current_drag_box = (x, y)
        # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        x1, y1 = drag_start_point
        x2, y2 = x, y
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        x1, x2 = min(x1, x2), max(x1, x2)
        y1, y2 = min(y1, y2), max(y1, y2)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        draw_calibration_box(x1, y1, x2, y2)
        return
    # –ï—Å–ª–∏ Shift —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—É—â–µ–Ω (–∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è)
    if not shift_held and shift_pressed:
        shift_pressed = False
        log_message("CALIBRATE", f"üìè –í—ã–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: ({x}, {y}). –ù–∞–∂–º–∏—Ç–µ –ü–ö–ú –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


def calibration_mouse_listener():
    """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å –º—ã—à–∏ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
    from pynput import mouse
    def on_click(x, y, button, pressed):
        if calibration_active:
            handle_calibration_click(x, y, button.name, pressed)
        return True

    def on_move(x, y):
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if calibration_active:
            handle_shift_drag(x, y)

    listener = mouse.Listener(on_click=on_click, on_move=on_move)
    listener.start()
    return listener

    def on_move(x, y):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∂–∞—Ç Shift –∏ –∞–∫—Ç–∏–≤–Ω–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
        if calibration_active and keyboard.is_pressed('shift'):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            threading.Thread(target=lambda: handle_shift_drag(x, y), daemon=True).start()

    listener = mouse.Listener(on_click=on_click, on_move=on_move)
    listener.start()
    return listener


# === GUI ===
def start_log_window():
    root = tk.Tk()
    root.title("ü§ñAlbionOnline-AutoMarketSeller")
    root.geometry("650x450")
    root.attributes("-topmost", True)
    root.attributes("-alpha", 0.95)
    root.resizable(True, True)
    root.configure(bg="#1e1e1e")
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    menu_bar = tk.Menu(root)
    # –ú–µ–Ω—é "–§–∞–π–ª"
    file_menu = tk.Menu(menu_bar, tearoff=0)
    file_menu.add_command(label="–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞", command=lambda: start_calibration())
    file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", command=lambda: save_config())
    file_menu.add_separator()
    file_menu.add_command(label="–í—ã—Ö–æ–¥", command=root.destroy)
    menu_bar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
    # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
    help_menu = tk.Menu(menu_bar, tearoff=0)
    help_menu.add_command(label="–°–ø—Ä–∞–≤–∫–∞", command=lambda: messagebox.showinfo(
        "–°–ø—Ä–∞–≤–∫–∞",
        "F1: –†–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (–ü–ö–ú –¥–ª—è –≤—ã–±–æ—Ä–∞)\n"
        "F2: –¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ü–µ–Ω—ã\n"
        "F3: –¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã\n"
        "F4: –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞\n"
        "F5: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞\n"
        "Esc: –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
    ))
    menu_bar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
    root.config(menu=menu_bar)
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title_label = tk.Label(
        root,
        text="üìã –õ–æ–≥ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞",
        font=("Consolas", 12, "bold"),
        bg="#1e1e1e",
        fg="#00cc99"
    )
    title_label.pack(pady=5)
    # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
    text_area = scrolledtext.ScrolledText(
        root,
        wrap=tk.WORD,
        width=80,
        height=22,
        font=("Consolas", 9),
        bg="#111",
        fg="#f0f0f0",
        insertbackground="white",
        highlightthickness=0,
        bd=0
    )
    text_area.pack(padx=10, pady=5, fill=tk.BOTH, expand=True)
    # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
    status_frame = tk.Frame(root, bg="#1e1e1e")
    status_frame.pack(fill=tk.X, padx=10, pady=5)

    tk.Label(
        status_frame,
        text="–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤",
        font=("Consolas", 9),
        bg="#1e1e1e",
        fg="#cccccc",
        name="status_label"
    ).pack(side=tk.LEFT)

    # –ò–º—è –∞–≤—Ç–æ—Ä–∞
    tk.Label(
        status_frame,
        text="–ê–≤—Ç–æ—Ä: Vortales",
        font=("Consolas", 9),
        bg="#1e1e1e",
        fg="#666666"
    ).pack(side=tk.RIGHT, padx=(40, 10))

    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    tk.Label(
        status_frame,
        text=f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {screen_width}x{screen_height}",
        font=("Consolas", 9),
        bg="#1e1e1e",
        fg="#666666",
        name="resolution_label"
    ).pack(side=tk.RIGHT)
    MAX_LINES = 200

    def update_log():
        with log_lock:
            while log_queue:
                msg = log_queue.pop(0)
                text_area.insert(tk.END, msg + "\n")
                # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                if "ERROR" in msg:
                    text_area.tag_add("error", "end-2c linestart", "end-1c")
                elif "WARNING" in msg:
                    text_area.tag_add("warning", "end-2c linestart", "end-1c")
                elif "SUCCESS" in msg:
                    text_area.tag_add("success", "end-2c linestart", "end-1c")
                elif "CALIBRATE" in msg:
                    text_area.tag_add("calibrate", "end-2c linestart", "end-1c")
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–≥–∏
        text_area.tag_config("error", foreground="#ff6666")
        text_area.tag_config("warning", foreground="#ffff66")
        text_area.tag_config("success", foreground="#66ff66")
        text_area.tag_config("calibrate", foreground="#66aaff")
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        lines = text_area.get(1.0, tk.END).splitlines()
        if len(lines) > MAX_LINES:
            text_area.delete(1.0, f"{len(lines) - MAX_LINES + 1}.0")
        text_area.see(tk.END)
        root.after(200, update_log)

    def on_closing():
        log_message("INFO", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞)")
        # –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        global visualization_active, main_loop_running, calibration_active
        visualization_active = False
        main_loop_running = False
        calibration_active = False
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        try:
            mouse_listener.stop()
            keyboard.unhook_all()
        except:
            pass
        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        os._exit(0)  # –ü–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    root.protocol("WM_DELETE_WINDOW", on_closing)
    update_log()
    root.mainloop()


# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
def main_loop():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ toggle_main_loop().
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–ª–∞–≥—É current_loop_stop_flag.
    """
    log_message("INFO", "–ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ F5 –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

    while not current_loop_stop_flag.is_set():
        try:
            # –®–∞–≥ 1: –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–∞–º
            x, y = get_absolute_coords("sell_button")
            pyautogui.click(x=x, y=y)
            time.sleep(get_random_sleep("between_clicks"))

            x, y = get_absolute_coords("order_button")
            pyautogui.click(x=x, y=y)
            time.sleep(get_random_sleep("between_clicks"))

            # –®–∞–≥ 2: –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —á–∏—Å–ª–∞
            number1 = recognize_number("price_value")
            if number1 is not None:
                log_message("SUCCESS", f"–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: {number1:,}")
            else:
                log_message("WARNING", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ.")

            number2 = recognize_number("average_price")
            if number2 is None:
                log_message("ERROR", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–ø—É—Å–∫ –∏—Ç–µ—Ä–∞—Ü–∏–∏.")
                time.sleep(get_random_sleep("between_cycles"))
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

            log_message("INFO", f"–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: {number2:,}")

            # –®–∞–≥ 3: –õ–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            if number1 is None:
                # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º 90% –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ
                result = int(number2 * CONFIG["logic"]["fallback_ratio"])
                log_message("FALLBACK",
                            f"‚Üí Fallback: {CONFIG['logic']['fallback_ratio'] * 100:.0f}% –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞ ‚Üí {result:,}")
            else:
                if not compare_numbers(number1, number2):
                    # –ï—Å–ª–∏ —á–∏—Å–ª–∞ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –∑–∞–ø—É—Å–∫–∞–µ–º —É—Ç–æ—á–Ω—ë–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                    log_message("INFO",
                                f"–ß–∏—Å–ª–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è >{CONFIG['logic']['max_difference_percent']}%. –ó–∞–ø—É—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è...")
                    refined_number1 = robust_recognize_number("price_value")
                    refined_number2 = robust_recognize_number("average_price")
                    if refined_number1 is not None:
                        log_message("INFO", f"üîç –£—Ç–æ—á–Ω–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: {refined_number1:,}")
                        used_number = refined_number1
                    else:
                        log_message("WARNING", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ.")
                        used_number = number1
                    if refined_number2 is not None:
                        log_message("INFO", f"üîç –£—Ç–æ—á–Ω–µ–Ω–æ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: {refined_number2:,}")
                    result = int(used_number * CONFIG["logic"]["fallback_ratio"])
                    log_message("SUCCESS",
                                f"‚Üí –†–µ–∑—É–ª—å—Ç–∞—Ç: {CONFIG['logic']['fallback_ratio'] * 100:.0f}% –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ = {result:,}")
                else:
                    # –ß–∏—Å–ª–∞ –±–ª–∏–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º 90% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ
                    result = int(number1 * CONFIG["logic"]["fallback_ratio"])
                    log_message("SUCCESS",
                                f"‚Üí –ß–∏—Å–ª–∞ –±–ª–∏–∑–∫–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç: {CONFIG['logic']['fallback_ratio'] * 100:.0f}% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ = {result:,}")

            # –®–∞–≥ 4: –í–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            x, y = get_absolute_coords("price_input")
            pyautogui.click(x=x, y=y)
            time.sleep(get_random_sleep("before_input"))

            pyautogui.write(str(result))
            time.sleep(get_random_sleep("between_clicks"))

            x, y = get_absolute_coords("submit_button")
            pyautogui.click(x=x, y=y)
            time.sleep(get_random_sleep("after_input"))

            log_message("ACTION", f"‚úÖ –í–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {result:,}")
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            time.sleep(get_random_sleep("between_cycles"))
        except Exception as e:
            log_message("ERROR", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            time.sleep(get_random_sleep("between_cycles"))

    log_message("INFO", "–¶–∏–∫–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω.")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
    current_loop_stop_flag.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
def toggle_main_loop():
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.
    –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ F4 –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏–∫–ª.
    """
    global main_loop_running, main_loop_thread
    if main_loop_running:
        # –¶–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        current_loop_stop_flag.set()
        log_message("STOP", "üõë –¶–∏–∫–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (F4).")
    else:
        # –¶–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        def run_loop():
            """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞."""
            try:
                main_loop()  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            except Exception as e:
                log_message("ERROR", f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            finally:
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ —Å–±—Ä–æ—Å–∏—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π
                global main_loop_running
                main_loop_running = False

        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        main_loop_thread = threading.Thread(target=run_loop, daemon=True)
        main_loop_running = True
        main_loop_thread.start()
        log_message("START", "üöÄ –¶–∏–∫–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏–π –∑–∞–ø—É—â–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è F5
def handle_f5(event):
    if event.scan_code == 63:  # F5
        if main_loop_running:
            current_loop_stop_flag.set()
            log_message("STOP", "üõë –¶–∏–∫–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ F5.")
        else:
            log_message("INFO", "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ F5.")


# === –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´ ===
if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    load_config()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ –ª–æ–≥–∞ –≤ —Ñ–æ–Ω–µ
    log_thread = threading.Thread(target=start_log_window, daemon=True)
    log_thread.start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –º—ã—à–∏ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    mouse_listener = calibration_mouse_listener()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    viz_worker = start_visualization_worker()
    time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è GUI –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    log_message("READY", "üéØ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    log_message("HINT", "F1 ‚Äî –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–ü–ö–ú –¥–ª—è –≤—ã–±–æ—Ä–∞) | F2/F3 ‚Äî —Ç–µ—Å—Ç OCR | F4 ‚Äî –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ | F5 ‚Äî —Å—Ç–æ–ø —Ü–∏–∫–ª–∞")


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    def handle_f1(event):
        if event.scan_code == 59:  # F1
            start_calibration()


    def handle_f2(event):
        if event.scan_code == 60:  # F2
            number = recognize_number("price_value")
            if number is not None:
                log_message("TEST", f"–¢–µ—Å—Ç '–¶–µ–Ω–∞': {number:,}")
            else:
                log_message("TEST", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å '–¶–µ–Ω—É'")


    def handle_f3(event):
        if event.scan_code == 61:  # F3
            number = recognize_number("average_price")
            if number is not None:
                log_message("TEST", f"–¢–µ—Å—Ç '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': {number:,}")
            else:
                log_message("TEST", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å '–°—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É'")


    def handle_f4(event):
        if event.scan_code == 62:  # F4
            toggle_main_loop()


    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    keyboard.on_press_key(59, handle_f1)  # F1
    keyboard.on_press_key(60, handle_f2)  # F2
    keyboard.on_press_key(61, handle_f3)  # F3
    keyboard.on_press_key(62, handle_f4)  # F4
    keyboard.on_press_key(63, handle_f5)  # F5
    log_message("INFO", "–ù–∞–∂–º–∏—Ç–µ F1 –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏, F4 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞, F5 –¥–ª—è –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
    try:
        while True:
            time.sleep(0.1)
    except KeyboardInterrupt:
        log_message("INFO", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        visualization_active = False
        mouse_listener.stop()